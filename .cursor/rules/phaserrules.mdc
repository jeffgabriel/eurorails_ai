---
description: 
globs: 
alwaysApply: false
---
# Phaser Engine Rules and Behaviors

## SVG Handling in Phaser
- Phaser converts SVG files to bitmap textures at load time
- SVGs are not rendered as vector graphics in real-time
- Modifying SVG files after they are loaded will not affect the in-game sprites
- SVG modifications require a game reload to take effect
- The main benefits of SVGs in Phaser are:
  - Smaller file sizes for distribution
  - Clean source files for asset management
  - Initial high-quality conversion to textures

## Best Practices for SVG Assets in Phaser
1. **Asset Loading**
   - SVGs should be properly sized and formatted before loading
   - Ensure SVG viewBox and dimensions are correct in the source file
   - Test SVG appearance before implementing in Phaser
   - use this.load.svg for svg based images
   - scale an svg at load time if at all possible

2. **Runtime Behavior**
   - Treat loaded SVG sprites like any other bitmap sprite
   - Use Phaser's sprite manipulation methods for runtime changes
   - Scale, rotate, and transform using Phaser's sprite properties
   - Do not attempt to modify SVG properties at runtime

3. **Troubleshooting Display Issues**
   - If sprite appears incorrect, fix the source SVG file
   - Clear browser cache and reload the game to see SVG changes
   - Use Phaser's sprite debugging tools to check texture bounds
   - Consider sprite scale and anchor points for positioning

4. **Performance Considerations**
   - SVGs are converted to textures only once at load time
   - Runtime performance is identical to PNG/JPG sprites
   - Memory usage is based on the converted texture size
   - Choose appropriate SVG complexity for target texture resolution 


5. **Container visibility**
   - Containers which need to show above others should use container.setDepth(9998);
   - Containers which should not interact with zoom or pan should use container.setScrollFactor(0);
   














